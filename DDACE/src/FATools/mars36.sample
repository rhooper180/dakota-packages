c
c Sample user coded driver program for running MARS 3.6
c
c This is a simple program to run MARS on a small data set for testing
c purposes. The input data (provided below) is assumed to be on a file
c named 'mars.data' in the local directory. Printed output (also provided
c below) is sent to the standard output (Fortran file unit 6). Note that
c this output might be slightly different than that obtained by running
c this program on a computer with different floating point arithmetic.
c The resulting model ought to be (nearly) equivalent.
c
c This program provides only the minimal input necessary to run MARS. It
c thereby makes maximal use of internally supplied defaults, and therefore
c does not take advantage of the many user options available for guiding
c the analysis (see MARS documentation).
c
c set up problem dependent parameters for this (small) example:
c  50 observations (cases).
c   5 predictor variables (inputs).
c   2 variable interactions maximum.
c  15 basis functions maximum.
c
      parameter (n=50, np=5, mi=2, nk=15)
c
c set up (generic) graphics parameters:
c 100 raster points for curves.
c  40 raster points (on each axis) for surfaces.
c  plot piecewise-cubic (continuous derivative) model.
c  show surfaces inside respective bivariate convex hulls.
c 
      parameter (ngc=100, ngs=40, m=2, icx=1)
c
c  set up working storage:
c  constant dimensioned arrays may need to be set to larger values
c  for much larger problems (see MARS documentation).
c

      real x(n,np),y(n),w(n),fm(5000),sp(20000)
      real crv(ngc,2,nk),srf(ngs,ngs,nk)
      integer lx(np),im(5000),mm(5000)
      double precision dp(20000)
c
c set predictor variable flags to indicate all are unrestricted
c ordinal variables, and set observation weights:
c
      data lx,w /np*1,n*1.0/
c
c write output header:
c
      write(6,'(/,''  simple driver to test MARS 3.6. '')')
c
c read in data:
c
      open(10,file='mars.data',status='unknown')
      do 1 i=1,n
      read(10,*) (x(i,j),j=1,np),y(i)
    1 continue
c
c invoke MARS:
c
      call mars (n,np,x,y,w,nk,mi,lx,fm,im,sp,dp,mm)
c
c construct plots for interpreting resulting model:
c

      call plot (m,x,fm,im,ngc,ngs,icx,nc,crv,ns,srf,sp,mm)
c
c write plots to output files for plotting with local graphics package:
c
      if(nc.le.0) go to 2
      open(11,file='mars.curves',status='unknown')
      write(11,*) (((crv(i,j,k),i=1,ngc),j=1,2),k=1,nc)
    2 continue
      if(ns.le.0) go to 3
      open(12,file='mars.surfs',status='unknown')
      write(12,*) (((srf(i,j,k),i=1,ngs),j=1,ngs),k=1,ns)
    3 continue
      stop
      end
c


*******************************************************************************
**** Printed output derived from running above program on the data below. *****
*******************************************************************************


  simple driver to test MARS 3.6. 


 MARS modeling, version 3.6 (3/25/93)


 input parameters (see doc.):
    n     p    nk    ms    mi     df    il    fv     ic
    50    5    15     0     2   3.000    0  0.000     0

 predictor variable flags:
 var:    1  2  3  4  5
 flag:   1  1  1  1  1

 ordinal response:
      min         n/4         n/2        3n/4         max
    3.925       10.04       14.10       17.20       24.75    

 there are  5 ordinal predictor variables.

  var     min         n/4         n/2        3n/4         max
   1   0.1600E-01  0.2190      0.4690      0.7190      0.9690    
   2   0.1200E-01  0.2220      0.4810      0.7410      0.9630    
   3   0.8000E-02  0.2080      0.4800      0.7280      0.9680    
   4   0.3000E-02  0.2040      0.4690      0.7350      0.9800    
   5   0.8000E-02  0.1980      0.4550      0.6610      0.9340    


 forward stepwise knot placement:

  basfn(s)    gcv      #indbsfns  #efprms   variable      knot            parent
     0       23.50         0.0     1.0
     1       20.96         1.0     5.0        4.        0.3000E-02           0.
   3   2     17.98         3.0    10.0        2.        0.4810               0.
   5   4     13.97         5.0    15.0        1.        0.5620               0.
   7   6     12.22         7.0    20.0        3.        0.5680               0.
   9   8     9.847         9.0    25.0        5.        0.3640               0.
  11  10     12.25        11.0    30.0        1.        0.5470               2.
    12       16.87        12.0    34.0        3.        0.8000E-02           5.
    13       18.93        13.0    38.0        2.        0.1200E-01           5.
  15  14     50.84        15.0    43.0        5.        0.5790               7.

 final model after backward stepwise elimination:

 bsfn:       0           1           2           3           4           5    
 coef:   12.98       9.828      0.0000E+00  -22.40      0.0000E+00  0.0000E+00

 bsfn:       6           7           8           9          10          11    
 coef:   12.49       8.369      0.0000E+00  -11.02      -27.59       50.80    

 bsfn:      12          13          14          15        
 coef:  0.0000E+00  -40.14      0.0000E+00  0.0000E+00

   (piecewise linear) gcv =    5.687       #efprms =  23.4

 anova decomposition on  8 basis functions:
  fun. std. dev.     -gcv    #bsfns  #efprms  variable(s)
   1    2.847       27.34       1       2.8     4
   2    3.470       28.99       1       2.8     2
   3    1.447       8.841       2       5.6     3
   4    1.276       9.058       1       2.8     5
   5    2.697       15.35       3       8.4     1   2

 piecewise cubic fit on  8 basis functions, gcv =   5.480    

 -gcv removing each variable:

        1           2           3           4           5        
    15.35       22.40       8.841       27.34       9.058    

 relative variable importance:

        1           2           3           4           5        
    66.82       87.87       38.17       100.0       39.46    

 mars graphics (piecewise-cubic):

 pure ordinal contribution:
   crv  1:  x( 4).  max =   9.688    
   crv  2:  x( 3).  max =   4.668    
   crv  3:  x( 5).  max =   4.129    
   srf  1:  x( 1), x( 2).  max =   10.79    

   3 curves and  1 surfaces.


*******************************************************************************
****** Input data for the driver program that produced the above output. ******
*******************************************************************************
     0.500     0.333     0.200     0.143     0.091     9.653
     0.250     0.667     0.400     0.286     0.182     8.765
     0.750     0.111     0.600     0.429     0.273     8.292
     0.125     0.444     0.800     0.571     0.364    13.796
     0.625     0.778     0.040     0.714     0.455    24.134
     0.375     0.222     0.240     0.857     0.545    17.111
     0.875     0.556     0.440     0.020     0.636    13.420
     0.062     0.889     0.640     0.163     0.727     7.951
     0.562     0.037     0.840     0.306     0.818     9.939
     0.312     0.370     0.080     0.449     0.909    15.615
     0.812     0.704     0.280     0.592     0.008    16.956
     0.188     0.148     0.480     0.735     0.099     8.924
     0.688     0.481     0.680     0.878     0.190    19.789
     0.438     0.815     0.880     0.041     0.281    14.596
     0.938     0.259     0.120     0.184     0.372    13.713
     0.031     0.593     0.320     0.327     0.463     6.862
     0.531     0.926     0.520     0.469     0.554    17.263
     0.281     0.074     0.720     0.612     0.645    11.168
     0.781     0.407     0.920     0.755     0.736    21.977
     0.156     0.741     0.160     0.898     0.826    18.631
     0.656     0.185     0.360     0.061     0.917     7.909
     0.406     0.519     0.560     0.204     0.017     9.866
     0.906     0.852     0.760     0.347     0.107    10.142
     0.094     0.296     0.960     0.490     0.198    12.161
     0.594     0.630     0.008     0.633     0.289    22.449
     0.344     0.963     0.208     0.776     0.380    19.795
     0.844     0.012     0.408     0.918     0.471    11.399
     0.219     0.346     0.608     0.082     0.562     5.924
     0.719     0.679     0.808     0.224     0.653    14.938
     0.469     0.123     0.048     0.367     0.744    13.153
     0.969     0.457     0.248     0.510     0.835    21.515
     0.016     0.790     0.448     0.653     0.926    11.851
     0.516     0.235     0.648     0.796     0.025    12.167
     0.266     0.568     0.848     0.939     0.116    17.204
     0.766     0.901     0.088     0.102     0.207    14.095
     0.141     0.049     0.288     0.245     0.298     3.925
     0.641     0.383     0.488     0.388     0.388    14.185
     0.391     0.716     0.688     0.531     0.479    14.717
     0.891     0.160     0.888     0.673     0.570    18.291
     0.078     0.494     0.128     0.816     0.661    15.741
     0.578     0.827     0.328     0.959     0.752    24.748
     0.328     0.272     0.528     0.122     0.843    11.031
     0.828     0.605     0.728     0.265     0.934    20.199
     0.203     0.938     0.928     0.408     0.033    13.252
     0.703     0.086     0.168     0.551     0.124    10.041
     0.453     0.420     0.368     0.694     0.215    15.079
     0.953     0.753     0.568     0.837     0.306    18.463
     0.047     0.198     0.768     0.980     0.397    15.470
     0.547     0.531     0.968     0.003     0.488    16.365
     0.297     0.864     0.016     0.146     0.579    15.694
