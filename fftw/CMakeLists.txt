SET(FFTW_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET(FFTW_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

SET( CMAKE_MODULE_PATH
  ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake
  ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/utils
  ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/package_arch
  ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/config_tests
)
INCLUDE(TrilinosFortranMangling)

SET(LTLIBRARIES fftw3)

FIND_PACKAGE(Threads)

INCLUDE(CheckTypeSize)
CHECK_TYPE_SIZE(double SIZEOF_DOUBLE)
CHECK_TYPE_SIZE(float SIZEOF_FLOAT)
CHECK_TYPE_SIZE("uintptr_t" UINTPTR_T)
CHECK_TYPE_SIZE("unsigned int" SIZEOF_UNSIGNED_INT)
CHECK_TYPE_SIZE("unsigned long" SIZEOF_UNSIGNED_LONG)
CHECK_TYPE_SIZE("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
CHECK_TYPE_SIZE("void*" SIZEOF_VOID_P)

INCLUDE(CheckIncludeFiles)
CHECK_INCLUDE_FILES("alloca.h" HAVE_ALLOCA_H)
CHECK_INCLUDE_FILES("altivec.h" HAVE_ALTIVEC_H)
CHECK_INCLUDE_FILES("c_asm.h" HAVE_C_ASM_H)
CHECK_INCLUDE_FILES("intrinsics.h" HAVE_INTRINSICS_H)
CHECK_INCLUDE_FILES("inttypes.h" HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES("limits.h" HAVE_LIMITS_H)
CHECK_INCLUDE_FILES("mach/mach_time.h" HAVE_MACH_MACH_TIME_H)
CHECK_INCLUDE_FILES("malloc.h" HAVE_MALLOC_H)
CHECK_INCLUDE_FILES("memory.h" HAVE_MEMORY_H)
CHECK_INCLUDE_FILES("stddef.h" HAVE_STDDEF_H)
CHECK_INCLUDE_FILES("stdint.h" HAVE_STDINT_H)
CHECK_INCLUDE_FILES("stdlib.h" HAVE_STDLIB_H)
CHECK_INCLUDE_FILES("strings.h" HAVE_STRINGS_H)
CHECK_INCLUDE_FILES("sys/stat.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES("sys/sysctl.h" HAVE_SYS_SYSCTL_H)
CHECK_INCLUDE_FILES("sys/time.h" HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES("unistd.h" HAVE_UNISTD_H)

INCLUDE(CheckFunctionExists)
CHECK_FUNCTION_EXISTS(abort HAVE_ABORT)
CHECK_FUNCTION_EXISTS(alloca HAVE_ALLOCA)
CHECK_FUNCTION_EXISTS(BSDgettimeofday HAVE_BSDGETTIMEOFDAY)
CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
CHECK_FUNCTION_EXISTS(cosl HAVE_COSL)
CHECK_FUNCTION_EXISTS(drand48 HAVE_DRAND48)
CHECK_FUNCTION_EXISTS(gethrtime HAVE_GETHRTIME)
CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)
CHECK_FUNCTION_EXISTS(isnan HAVE_ISNAN)
CHECK_FUNCTION_EXISTS(mach_absolute_time HAVE_MACH_ABSOLUTE_TIME)
CHECK_FUNCTION_EXISTS(memalign HAVE_MEMALIGN)
CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET)
CHECK_FUNCTION_EXISTS(posix_memalign HAVE_POSIX_MEMALIGN)
CHECK_FUNCTION_EXISTS(read_real_time HAVE_READ_REAL_TIME)
CHECK_FUNCTION_EXISTS(sinl HAVE_SINL)
CHECK_FUNCTION_EXISTS(sqrt HAVE_SQRT)
CHECK_FUNCTION_EXISTS(sysctl HAVE_SYSCTL)
CHECK_FUNCTION_EXISTS(tanl HAVE_TANL)
CHECK_FUNCTION_EXISTS(time_base_to_time HAVE_TIME_BASE_TO_TIME)
CHECK_FUNCTION_EXISTS(vprintf HAVE_VPRINTF)
CHECK_FUNCTION_EXISTS(_mm_free HAVE__MM_FREE)
CHECK_FUNCTION_EXISTS(_mm_malloc HAVE__MM_MALLOC)
CHECK_FUNCTION_EXISTS(_rtc HAVE__RTC)

OPTION(USE_SSE "Use SSE optimization." OFF)
OPTION(USE_SSE2 "Use SSE2 optimization." OFF)
OPTION(USE_ALTIVEC "Use Altivec optimization." OFF)
IF(USE_SSE AND USE_SSE2)
  MESSAGE(FATAL_ERROR "You cannot use SSE and SSE2 simultaneously")
ENDIF(USE_SSE AND USE_SSE2)
IF(USE_SSE)
  SET(HAVE_SSE 1)
  SET(FFTW_SINGLE 1)
  ADD_DEFINITIONS(-D__SSE__)
  ADD_DEFINITIONS(-D__MMX__)
ENDIF(USE_SSE)
IF(USE_SSE2)
  SET(HAVE_SSE2 1)
  ADD_DEFINITIONS(-D__SSE2__)
  ADD_DEFINITIONS(-D__SSE__)
  ADD_DEFINITIONS(-D__MMX__)
ENDIF(USE_SSE2)
IF(USE_ALTIVEC)
  IF(NOT ${HAVE_ALTIVEC_H})
    MESSAGE(FATAL_ERROR "USE_ALTIVEC is set to ON, but HAVE_ALTIVEC_H is NULL")
  ENDIF(NOT ${HAVE_ALTIVEC_H})
ENDIF(USE_ALTIVEC)

IF(USE_SSE OR USE_SSE2 OR USE_ALTIVEC)
  SET(HAVE_SIMD 1)
ENDIF(USE_SSE OR USE_SSE2 OR USE_ALTIVEC)

if(WIN32)
  set(WINDOWS_F77_MANGLING TRUE)
endif()

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake-config.h.in
               ${CMAKE_CURRENT_BINARY_DIR}/config.h
               @ONLY
)

SUBDIRS( kernel dft rdft reodft threads api cell libbench2 tests 
  tools) #support doc

IF(HAVE_SIMD)
SUBDIRS( simd )
SET(SIMD_LIBS 
	simd
	simd_nonportable
	dft_simd
	dft_codelets_simd
)
ENDIF(HAVE_SIMD)
#else
#SIMD_LIBS=
#endif

#IF(HAVE_K7)
#SET(K7_LIBS
#  dft_k7
#  dft_codelets_k7
#)
#ENDIF(HAVE_K7)

#IF(THREADS AND COMBINED_THREADS)
  SET(COMBINED_THREADLIBS fftw3_threads)
#ENDIF(THREADS AND COMBINED_THREADS)

ADD_LIBRARY(fftw3 empty.cxx)
TARGET_LINK_LIBRARIES(fftw3 
  kernel				
  dft					
  #dft_codelets			
  #dft_standard	
  rdft					
  #rdft_codelets		
  #rdft_codelets_r2hc	
  #rdft_codelets_hc2r	
  #rdft_codelets_r2r	
  reodft				
  api					
  ${SIMD_LIBS}
  ${K7_LIBS}
  ${COMBINED_THREADLIBS}
)

INSTALL(TARGETS fftw3 DESTINATION lib)

