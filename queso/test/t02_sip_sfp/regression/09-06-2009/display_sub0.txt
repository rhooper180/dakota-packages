
=================================
 QUESO library, version 0.4.1, released on Sep/08/2009
=================================

Beginning run at Sun Sep  6 09:36:11 2009

In uqFullEnvironment::commonConstructor():
  m_seed = 0
  internal seed = 0
Entering uqStatisticalInverseProblem<P_V,P_M>::constructor(): prefix = ip_
In uqStatisticalInverseProblemOptions::scanOptionsValues(): after getting values of options with prefix 'ip_', state of  object is:

ip_computeSolution = 1
ip_dataOutputFileName = outputData/sipOutput
ip_dataOutputAllowedSet = 0 

Leaving uqStatisticalInverseProblem<P_V,P_M>::constructor(): prefix = ip_
In uqStatisticalInverseProblem<P_V,P_M>::solveWithBayesMetropolisHastings(): computing solution, as requested by user
Entering uqMetropolisHastingsSG<P_V,P_M>::constructor(1)
In uqMetropolisHastingsSGOptions::scanOptionsValues(): after getting values of options with prefix 'ip_mh_', state of object is:
ip_mh_dataOutputFileName = outputData/sipOutput
ip_mh_dataOutputAllowedSet = 0 1 
ip_mh_totallyMute = 0
ip_mh_rawChain_dataInputFileName = .
ip_mh_rawChain_size = 32768
ip_mh_rawChain_generateExtra = 0
ip_mh_rawChain_displayPeriod = 50000
ip_mh_rawChain_measureRunTimes = 1
ip_mh_rawChain_dataOutputFileName = outputData/ip_raw_chain
ip_mh_rawChain_dataOutputAllowedSet = 0 1 
ip_mh_rawChain_computeStats = 1
ip_mh_filteredChain_generate = 1
ip_mh_filteredChain_discardedPortion = 0
ip_mh_filteredChain_lag = 16
ip_mh_filteredChain_dataOutputFileName = outputData/ip_filt_chain
ip_mh_filteredChain_dataOutputAllowedSet = 0 1 
ip_mh_filteredChain_computeStats = 1
ip_mh_displayCandidates = 0
ip_mh_putOutOfBoundsInChain = 1
ip_mh_tk_useLocalHessian = 0
ip_mh_tk_useNewtonComponent = 1
ip_mh_dr_maxNumExtraStages = 1
ip_mh_dr_listOfScalesForExtraStages = 5 
ip_mh_am_initialNonAdaptInterval = 0
ip_mh_am_adaptInterval = 100
ip_mh_am_eta = 1.92
ip_mh_am_epsilon = 1e-05

Entering uqSequenceStatisticalOptions::constructor(), prefix = ip_mh_rawChain_stats_
After getting values of options with prefix 'ip_mh_rawChain_stats_', state of uqSequenceStatisticalOptions object is:

ip_mh_rawChain_stats_initialDiscardedPortions = 0 
ip_mh_rawChain_stats_bmm_run = 0
ip_mh_rawChain_stats_bmm_lengths = 0 
ip_mh_rawChain_stats_fft_compute = 0
ip_mh_rawChain_stats_fft_paramId = 0
ip_mh_rawChain_stats_fft_size = 2048
ip_mh_rawChain_stats_fft_testInversion = 0
ip_mh_rawChain_stats_fft_write = 0
ip_mh_rawChain_stats_psd_compute = 0
ip_mh_rawChain_stats_psd_paramId = 0
ip_mh_rawChain_stats_psd_numBlocks = 8
ip_mh_rawChain_stats_psd_hopSizeRatio = 0
ip_mh_rawChain_stats_psd_write = 0
ip_mh_rawChain_stats_psdAtZero_compute = 0
ip_mh_rawChain_stats_psdAtZero_numBlocks = 8 
ip_mh_rawChain_stats_psdAtZero_hopSizeRatio = 0.5
ip_mh_rawChain_stats_psdAtZero_display = 0
ip_mh_rawChain_stats_psdAtZero_write = 0
ip_mh_rawChain_stats_geweke_compute = 0
ip_mh_rawChain_stats_geweke_naRatio = 0.1
ip_mh_rawChain_stats_geweke_nbRatio = 0.5
ip_mh_rawChain_stats_geweke_display = 0
ip_mh_rawChain_stats_geweke_write = 0
ip_mh_rawChain_stats_autoCorr_computeViaDef = 0
ip_mh_rawChain_stats_autoCorr_computeViaFft = 1
ip_mh_rawChain_stats_autoCorr_secondLag = 2
ip_mh_rawChain_stats_autoCorr_lagSpacing = 2
ip_mh_rawChain_stats_autoCorr_numLags = 10
ip_mh_rawChain_stats_autoCorr_display = 1
ip_mh_rawChain_stats_autoCorr_write = 1
ip_mh_rawChain_stats_meanStacc_compute = 0
ip_mh_rawChain_stats_hist_compute = 1
ip_mh_rawChain_stats_hist_numInternalBins = 250
ip_mh_rawChain_stats_cdfStacc_compute = 0
ip_mh_rawChain_stats_cdfStacc_numEvalPositions = 50
ip_mh_rawChain_stats_kde_compute = 0
ip_mh_rawChain_stats_kde_numEvalPositions = 250
ip_mh_rawChain_stats_covMatrix_compute = 1
ip_mh_rawChain_stats_corrMatrix_compute = 1

Leaving uqSequenceStatisticalOptions::constructor(), prefix = ip_mh_rawChain_stats_
Entering uqSequenceStatisticalOptions::constructor(), prefix = ip_mh_filteredChain_stats_
After getting values of options with prefix 'ip_mh_filteredChain_stats_', state of uqSequenceStatisticalOptions object is:

ip_mh_filteredChain_stats_initialDiscardedPortions = 0 
ip_mh_filteredChain_stats_bmm_run = 0
ip_mh_filteredChain_stats_bmm_lengths = 0 
ip_mh_filteredChain_stats_fft_compute = 0
ip_mh_filteredChain_stats_fft_paramId = 0
ip_mh_filteredChain_stats_fft_size = 2048
ip_mh_filteredChain_stats_fft_testInversion = 0
ip_mh_filteredChain_stats_fft_write = 0
ip_mh_filteredChain_stats_psd_compute = 0
ip_mh_filteredChain_stats_psd_paramId = 0
ip_mh_filteredChain_stats_psd_numBlocks = 8
ip_mh_filteredChain_stats_psd_hopSizeRatio = 0
ip_mh_filteredChain_stats_psd_write = 0
ip_mh_filteredChain_stats_psdAtZero_compute = 0
ip_mh_filteredChain_stats_psdAtZero_numBlocks = 8 
ip_mh_filteredChain_stats_psdAtZero_hopSizeRatio = 0.5
ip_mh_filteredChain_stats_psdAtZero_display = 0
ip_mh_filteredChain_stats_psdAtZero_write = 0
ip_mh_filteredChain_stats_geweke_compute = 0
ip_mh_filteredChain_stats_geweke_naRatio = 0.1
ip_mh_filteredChain_stats_geweke_nbRatio = 0.5
ip_mh_filteredChain_stats_geweke_display = 0
ip_mh_filteredChain_stats_geweke_write = 0
ip_mh_filteredChain_stats_autoCorr_computeViaDef = 0
ip_mh_filteredChain_stats_autoCorr_computeViaFft = 1
ip_mh_filteredChain_stats_autoCorr_secondLag = 2
ip_mh_filteredChain_stats_autoCorr_lagSpacing = 2
ip_mh_filteredChain_stats_autoCorr_numLags = 10
ip_mh_filteredChain_stats_autoCorr_display = 1
ip_mh_filteredChain_stats_autoCorr_write = 1
ip_mh_filteredChain_stats_meanStacc_compute = 0
ip_mh_filteredChain_stats_hist_compute = 1
ip_mh_filteredChain_stats_hist_numInternalBins = 250
ip_mh_filteredChain_stats_cdfStacc_compute = 0
ip_mh_filteredChain_stats_cdfStacc_numEvalPositions = 50
ip_mh_filteredChain_stats_kde_compute = 1
ip_mh_filteredChain_stats_kde_numEvalPositions = 250
ip_mh_filteredChain_stats_covMatrix_compute = 1
ip_mh_filteredChain_stats_corrMatrix_compute = 1

Leaving uqSequenceStatisticalOptions::constructor(), prefix = ip_mh_filteredChain_stats_
In uqMetropolisHastingsSG<P_V,P_M>::constructor(): running with UQ_USES_TK_CLASS flag defined
In uqMetropolisHastingsSG<P_V,P_M>::constructor(): just instantiated a 'ScaledCovMatrix' TK class
Leaving uqMetropolisHastingsSG<P_V,P_M>::constructor(1)
Starting the generation of Markov chain ip_mh_rawChain, with 32768 positions...
In uqMetropolisHastingsSG<P_V,P_M>::generateFullChain(): contents of initial position are:
0.1 -1.4 
Finished the generation of Markov chain ip_mh_rawChain, with sub 32768 positions
Some information about this chain:
  Chain run time       = 1.03567 seconds

 Breaking of the chain run time:

  Candidate run time   = 0.225329 seconds (21.7568%)
  Target d. run time   = 0.122944 seconds (11.871%)
  Mh alpha run time    = 0.036477 seconds (3.52206%)
  Dr alpha run time    = 0.275564 seconds (26.6073%)
----------------------   --------------
  Sum                  = 0.660314 seconds (63.7571%)

 Other run times:
  DR run time          = 0.586024 seconds (56.584%)
  AM run time          = 0 seconds (0%)
  Rejection percentage = 23.8525 %
  Out of target support percentage = 0 %
In uqMetropolisHastingsSG<P_V,P_M>::generateSequence(), prefix = ip_mh_: checking necessity of opening generic output file (chain name is ip_mh_rawChain) ...
In uqMetropolisHastingsSG<P_V,P_M>::generateSequence(), prefix = ip_mh_: checking necessity of opening output files for raw chain ip_mh_rawChain...
In uqMetropolisHastingsSG<P_V,P_M>::generateSequence(), prefix = ip_mh_: closed unified output file 'outputData/ip_raw_chain' for raw chain ip_mh_rawChain


-----------------------------------------------------
 Writing extra information about the Markov chain ip_mh_rawChain to output file ...
-----------------------------------------------------


-----------------------------------------------------
 Finished writing extra information about the Markov chain ip_mh_rawChain
-----------------------------------------------------



-----------------------------------------------------
 Computing statistics for chain ip_mh_rawChain ...
-----------------------------------------------------

In uqBaseVectorSequence<V,M>::computeStatistics(): initial positions for statistics = 0

-----------------------------------------------------
Computing mean, sample variance and population variance

Estimated variance of sample mean for the whole chain ip_mh_rawChain, under independence assumption:
0.000118191
3.0671e-05

Mean and variances took 0.030243 seconds

Mean, sample std, population std
Parameter    Mean         SampleStd         Popul.Std
          -1.0099e+00   1.9680e+00   1.9679e+00
           2.0075e+00   1.0025e+00   1.0025e+00

-----------------------------------------------------
Computing autocorrelation coefficients (via fft)
In uqBaseVectorSequence<V,M>::computeAutoCorrViaFFT(): lags for autocorrelation (via fft) =  1 2 4 6 8 10 12 14 16 18
In uqBaseVectorSequence<V,M>::computeAutoCorrViaFFT(): about to call chain.autoCorrViaFft() with initialPos = 0, numPos = 32768, lagsForCorrs.size() = 10, corrVecs.size() = 10

Estimated variance of sample mean, through autocorrelation (via fft), for subchain beggining at position 0
0.000589027
5.53826e-05


Computed autocorrelation coefficients (via fft), for subchain beggining at position 0 (each column corresponds to a different lag)
Parameter            1            2            4            6            8           10           12           14           16           18
            8.6514e-01   7.5078e-01   5.6269e-01   4.2415e-01   3.1981e-01   2.4315e-01   1.8823e-01   1.4600e-01   1.1205e-01   8.4454e-02
            6.1953e-01   3.8278e-01   1.5339e-01   6.1220e-02   2.6731e-02   1.1928e-02   1.0187e-02   8.4409e-03   1.6659e-03   1.0446e-03
Chain autocorrelation (via fft) took 0.214445 seconds


-----------------------------------------------------
 Computing histogram and/or cdf stacc and/or KDE for chain ip_mh_rawChain ...
-----------------------------------------------------


-----------------------------------------------------
Computing min and max for histograms and KDE

Computed min values and max values for chain ip_mh_rawChain
Parameter         min         max
          -8.7366e+00   6.3216e+00
          -1.9936e+00   6.1102e+00
Chain min and max took 0.012604 seconds

-----------------------------------------------------
Computing histograms
Chain histograms took 0.01469 seconds

-----------------------------------------------------
 Finished computing histogram and/or cdf stacc and/or KDE for chain ip_mh_rawChain
-----------------------------------------------------



-----------------------------------------------------
 Computing covariance and correlation matrices for chain ip_mh_rawChain ...
-----------------------------------------------------


uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain ip_mh_rawChain: contents of covariance matrix are
3.87289 0.0259448 # 0.0259448 1.00503 # 

uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain ip_mh_rawChain: contents of correlation matrix are
1 0.0131505 # 0.0131505 1 # 

-----------------------------------------------------
 Finished computing covariance and correlation matrices for chain ip_mh_rawChain
-----------------------------------------------------

All statistics took 0.321626 seconds

-----------------------------------------------------
 Finished computing statistics for chain ip_mh_rawChain
-----------------------------------------------------

Entering uqSequenceOfVectors<V,M>::filter(): initialPos = 0, spacing = 16, subSequenceSize = 32768
Leaving uqSequenceOfVectors<V,M>::filter(): initialPos = 0, spacing = 16, subSequenceSize = 2048
In uqMetropolisHastingsSG<P_V,P_M>::generateSequence(), prefix = ip_mh_: checking necessity of opening output files for filtered chain ip_mh_filtChain...
In uqMetropolisHastingsSG<P_V,P_M>::generateSequence(), prefix = ip_mh_: closed unified output file 'outputData/ip_filt_chain' for filtered chain ip_mh_filtChain


-----------------------------------------------------
 Computing statistics for chain ip_mh_filtChain ...
-----------------------------------------------------

In uqBaseVectorSequence<V,M>::computeStatistics(): initial positions for statistics = 0

-----------------------------------------------------
Computing mean, sample variance and population variance

Estimated variance of sample mean for the whole chain ip_mh_filtChain, under independence assumption:
0.00194597
0.000478615

Mean and variances took 0.000802 seconds

Mean, sample std, population std
Parameter    Mean         SampleStd         Popul.Std
          -9.9652e-01   1.9963e+00   1.9958e+00
           2.0202e+00   9.9005e-01   9.8981e-01

-----------------------------------------------------
Computing autocorrelation coefficients (via fft)
In uqBaseVectorSequence<V,M>::computeAutoCorrViaFFT(): lags for autocorrelation (via fft) =  1 2 4 6 8 10 12 14 16 18
In uqBaseVectorSequence<V,M>::computeAutoCorrViaFFT(): about to call chain.autoCorrViaFft() with initialPos = 0, numPos = 2048, lagsForCorrs.size() = 10, corrVecs.size() = 10

Estimated variance of sample mean, through autocorrelation (via fft), for subchain beggining at position 0
0.000391698
0.000216028


Computed autocorrelation coefficients (via fft), for subchain beggining at position 0 (each column corresponds to a different lag)
Parameter            1            2            4            6            8           10           12           14           16           18
            1.1788e-01  -1.2989e-02   1.6701e-02  -1.6713e-02  -1.6246e-02  -1.4297e-02  -1.2687e-02   1.9928e-02   6.8664e-03   1.9064e-02
            5.6715e-03  -4.6440e-02   4.6240e-02   3.7479e-03   4.8575e-02   1.6436e-02   9.7021e-03   8.9280e-03   2.5203e-02   2.1048e-02
Chain autocorrelation (via fft) took 0.008439 seconds


-----------------------------------------------------
 Computing histogram and/or cdf stacc and/or KDE for chain ip_mh_filtChain ...
-----------------------------------------------------


-----------------------------------------------------
Computing min and max for histograms and KDE

Computed min values and max values for chain ip_mh_filtChain
Parameter         min         max
          -8.0136e+00   5.4596e+00
          -1.4000e+00   5.4773e+00
Chain min and max took 0.000431 seconds

-----------------------------------------------------
Computing histograms
Chain histograms took 0.003612 seconds

-----------------------------------------------------
Computing KDE
In uqScalarSequence<T>::subInterQuantileRange(): iqrValue = 2.67423, dataSize = 2048, pos1 = 511, pos3 = 1535, value1 = -2.31636, value3 = 0.357872
In uqScalarSequence<T>::subInterQuantileRange(): iqrValue = 1.28714, dataSize = 2048, pos1 = 511, pos3 = 1535, value1 = 1.37997, value3 = 2.66711
In uqScalarSequence<T>::subScaleForKDE(): iqrValue = 2.67423, meanValue = -0.996522, samValue = 3.98534, dataSize = 2048, scaleValue = 0.460399
In uqScalarSequence<T>::subScaleForKDE(): iqrValue = 1.28714, meanValue = 2.02021, samValue = 0.980204, dataSize = 2048, scaleValue = 0.221596

Computed inter quantile ranges for chain ip_mh_filtChain
Parameter         iqr
           2.6742e+00
           1.2871e+00
Chain KDE took 0.079836 seconds

-----------------------------------------------------
 Finished computing histogram and/or cdf stacc and/or KDE for chain ip_mh_filtChain
-----------------------------------------------------



-----------------------------------------------------
 Computing covariance and correlation matrices for chain ip_mh_filtChain ...
-----------------------------------------------------


uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain ip_mh_filtChain: contents of covariance matrix are
3.98534 0.0383035 # 0.0383035 0.980204 # 

uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain ip_mh_filtChain: contents of correlation matrix are
1 0.0193797 # 0.0193797 1 # 

-----------------------------------------------------
 Finished computing covariance and correlation matrices for chain ip_mh_filtChain
-----------------------------------------------------

All statistics took 0.094792 seconds

-----------------------------------------------------
 Finished computing statistics for chain ip_mh_filtChain
-----------------------------------------------------

In uqMetropolisHastingsSG<P_V,P_M>::generateSequence(), prefix = ip_mh_: closed generic output file 'outputData/sipOutput' (chain name is ip_mh_filtChain)

In uqSequentialVectorRealizer<V,M>::constructor(): m_chain.subSequenceSize() = 2048

Entering uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::constructor(): prefix = fp_
Statistical Forward Problem options:
  --fp_help                         produce help message for statistical forwar
                                    d problem
  --fp_computeSolution arg (=1)     compute solution process
  --fp_computeCovariances arg (=1)  compute pq covariances
  --fp_computeCorrelations arg (=1) compute pq correlations
  --fp_dataOutputFileName arg (=.)  name of data output file
  --fp_dataOutputAllowedSet arg     subEnvs that will write to data output file

In uqStatisticalForwardProblemOptions::scanOptionsValues(): after getting values of options with prefix 'fp_', state of  object is:
fp_computeSolution = 1
fp_computeCovariances = 1
fp_computeCorrelations = 1
fp_dataOutputFileName = outputData/sfpOutput
fp_dataOutputAllowedSet = 0 1 

Leaving uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::constructor(): prefix = fp_
In uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::solveWithMonteCarlo(): computing solution, as requested by user
Entering uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::constructor()
Monte Carlo options:
  --fp_mc_help                             produce help message for Monte Carlo
                                           distribution calculator
  --fp_mc_dataOutputFileName arg (=.)      name of generic data output file
  --fp_mc_dataOutputAllowedSet arg         subEnvs that will write to generic 
                                           data output file
  --fp_mc_pseq_dataOutputFileName arg (=.) name of data output file for 
                                           parameters
  --fp_mc_pseq_dataOutputAllowedSet arg    subEnvs that will write to data 
                                           output file for parameters
  --fp_mc_pseq_computeStats arg (=0)       compute statistics on sequence of 
                                           parameter
  --fp_mc_qseq_dataInputFileName arg (=.)  name of data input file for qois
  --fp_mc_qseq_size arg (=100)             size of qoi sequence
  --fp_mc_qseq_displayPeriod arg (=500)    period of message display during qoi
                                           sequence generation
  --fp_mc_qseq_measureRunTimes arg (=0)    measure run times
  --fp_mc_qseq_dataOutputFileName arg (=.) name of data output file for qois
  --fp_mc_qseq_dataOutputAllowedSet arg    subEnvs that will write to data 
                                           output file for qois
  --fp_mc_qseq_computeStats arg (=0)       compute statistics on sequence of 
                                           qoi

In uqMonteCarloSGOptions::scanOptionsValues(): after getting values of options with prefix 'fp_mc_', state of  object is:
fp_mc_dataOutputFileName = outputData/sfpOutput
fp_mc_dataOutputAllowedSet = 0 1 
fp_mc_pseq_dataOutputFileName = outputData/fp_p_seq
fp_mc_pseq_dataOutputAllowedSet = 0 1 
fp_mc_pseq_computeStats = 1
fp_mc_qseq_dataInputFileName = .
fp_mc_qseq_size = 1048576
fp_mc_qseq_displayPeriod = 20000
fp_mc_qseq_measureRunTimes = 1
fp_mc_qseq_dataOutputFileName = outputData/fp_q_seq
fp_mc_qseq_dataOutputAllowedSet = 0 1 
fp_mc_qseq_computeStats = 1
Entering uqSequenceStatisticalOptions::constructor(), prefix = fp_mc_pseq_stats_
After getting values of options with prefix 'fp_mc_pseq_stats_', state of uqSequenceStatisticalOptions object is:

fp_mc_pseq_stats_initialDiscardedPortions = 0 
fp_mc_pseq_stats_bmm_run = 0
fp_mc_pseq_stats_bmm_lengths = 0 
fp_mc_pseq_stats_fft_compute = 0
fp_mc_pseq_stats_fft_paramId = 0
fp_mc_pseq_stats_fft_size = 2048
fp_mc_pseq_stats_fft_testInversion = 0
fp_mc_pseq_stats_fft_write = 0
fp_mc_pseq_stats_psd_compute = 0
fp_mc_pseq_stats_psd_paramId = 0
fp_mc_pseq_stats_psd_numBlocks = 8
fp_mc_pseq_stats_psd_hopSizeRatio = 0
fp_mc_pseq_stats_psd_write = 0
fp_mc_pseq_stats_psdAtZero_compute = 0
fp_mc_pseq_stats_psdAtZero_numBlocks = 8 
fp_mc_pseq_stats_psdAtZero_hopSizeRatio = 0.5
fp_mc_pseq_stats_psdAtZero_display = 0
fp_mc_pseq_stats_psdAtZero_write = 0
fp_mc_pseq_stats_geweke_compute = 0
fp_mc_pseq_stats_geweke_naRatio = 0.1
fp_mc_pseq_stats_geweke_nbRatio = 0.5
fp_mc_pseq_stats_geweke_display = 0
fp_mc_pseq_stats_geweke_write = 0
fp_mc_pseq_stats_autoCorr_computeViaDef = 0
fp_mc_pseq_stats_autoCorr_computeViaFft = 0
fp_mc_pseq_stats_autoCorr_secondLag = 0
fp_mc_pseq_stats_autoCorr_lagSpacing = 0
fp_mc_pseq_stats_autoCorr_numLags = 0
fp_mc_pseq_stats_autoCorr_display = 0
fp_mc_pseq_stats_autoCorr_write = 0
fp_mc_pseq_stats_meanStacc_compute = 0
fp_mc_pseq_stats_hist_compute = 1
fp_mc_pseq_stats_hist_numInternalBins = 250
fp_mc_pseq_stats_cdfStacc_compute = 0
fp_mc_pseq_stats_cdfStacc_numEvalPositions = 50
fp_mc_pseq_stats_kde_compute = 1
fp_mc_pseq_stats_kde_numEvalPositions = 250
fp_mc_pseq_stats_covMatrix_compute = 1
fp_mc_pseq_stats_corrMatrix_compute = 1

Leaving uqSequenceStatisticalOptions::constructor(), prefix = fp_mc_pseq_stats_
Entering uqSequenceStatisticalOptions::constructor(), prefix = fp_mc_qseq_stats_
After getting values of options with prefix 'fp_mc_qseq_stats_', state of uqSequenceStatisticalOptions object is:

fp_mc_qseq_stats_initialDiscardedPortions = 0 
fp_mc_qseq_stats_bmm_run = 0
fp_mc_qseq_stats_bmm_lengths = 0 
fp_mc_qseq_stats_fft_compute = 0
fp_mc_qseq_stats_fft_paramId = 0
fp_mc_qseq_stats_fft_size = 2048
fp_mc_qseq_stats_fft_testInversion = 0
fp_mc_qseq_stats_fft_write = 0
fp_mc_qseq_stats_psd_compute = 0
fp_mc_qseq_stats_psd_paramId = 0
fp_mc_qseq_stats_psd_numBlocks = 8
fp_mc_qseq_stats_psd_hopSizeRatio = 0
fp_mc_qseq_stats_psd_write = 0
fp_mc_qseq_stats_psdAtZero_compute = 0
fp_mc_qseq_stats_psdAtZero_numBlocks = 8 
fp_mc_qseq_stats_psdAtZero_hopSizeRatio = 0.5
fp_mc_qseq_stats_psdAtZero_display = 0
fp_mc_qseq_stats_psdAtZero_write = 0
fp_mc_qseq_stats_geweke_compute = 0
fp_mc_qseq_stats_geweke_naRatio = 0.1
fp_mc_qseq_stats_geweke_nbRatio = 0.5
fp_mc_qseq_stats_geweke_display = 0
fp_mc_qseq_stats_geweke_write = 0
fp_mc_qseq_stats_autoCorr_computeViaDef = 0
fp_mc_qseq_stats_autoCorr_computeViaFft = 1
fp_mc_qseq_stats_autoCorr_secondLag = 2
fp_mc_qseq_stats_autoCorr_lagSpacing = 1
fp_mc_qseq_stats_autoCorr_numLags = 15
fp_mc_qseq_stats_autoCorr_display = 1
fp_mc_qseq_stats_autoCorr_write = 1
fp_mc_qseq_stats_meanStacc_compute = 0
fp_mc_qseq_stats_hist_compute = 1
fp_mc_qseq_stats_hist_numInternalBins = 250
fp_mc_qseq_stats_cdfStacc_compute = 0
fp_mc_qseq_stats_cdfStacc_numEvalPositions = 50
fp_mc_qseq_stats_kde_compute = 1
fp_mc_qseq_stats_kde_numEvalPositions = 250
fp_mc_qseq_stats_covMatrix_compute = 1
fp_mc_qseq_stats_corrMatrix_compute = 1

Leaving uqSequenceStatisticalOptions::constructor(), prefix = fp_mc_qseq_stats_
Leaving uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::constructor()
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(): m_options.m_qseqSize = 1048576, paramRv.realizer().subPeriod() = 2048, about to call actualGenerateSequence() with subActualSize = 2048
Starting the generation of qoi sequence fp_mc_QoiSeq, with 2048 samples...
Finished the generation of qoi sequence fp_mc_QoiSeq, with sub 2048 samples
Some information about this sequence:
  Sequence run time = 0.005881 seconds

 Breaking of the seq run time:

  QoI function run time   = 0.002204 seconds (37.4766%)
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(): returned from call to actualGenerateSequence() with subActualSize = 2048
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(), prefix = fp_mc_: checking necessity of opening generic output file (qseq name is fp_mc_QoiSeq) ...
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(), prefix = fp_mc_: checking necessity of opening output files for pseq fp_mc_ParamSeq...
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(), prefix = fp_mc_: closed unified data output file 'outputData/fp_p_seq' for pseq fp_mc_ParamSeq
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(): about to call 'workingPSeq.computeStatistics()'


-----------------------------------------------------
 Computing statistics for chain fp_mc_ParamSeq ...
-----------------------------------------------------

In uqBaseVectorSequence<V,M>::computeStatistics(): initial positions for statistics = 0

-----------------------------------------------------
Computing mean, sample variance and population variance

Estimated variance of sample mean for the whole chain fp_mc_ParamSeq, under independence assumption:
0.00194597
0.000478615

Mean and variances took 0.000848 seconds

Mean, sample std, population std
Parameter    Mean         SampleStd         Popul.Std
          -9.9652e-01   1.9963e+00   1.9958e+00
           2.0202e+00   9.9005e-01   9.8981e-01


-----------------------------------------------------
 Computing histogram and/or cdf stacc and/or KDE for chain fp_mc_ParamSeq ...
-----------------------------------------------------


-----------------------------------------------------
Computing min and max for histograms and KDE

Computed min values and max values for chain fp_mc_ParamSeq
Parameter         min         max
          -8.0136e+00   5.4596e+00
          -1.4000e+00   5.4773e+00
Chain min and max took 0.000426 seconds

-----------------------------------------------------
Computing histograms
Chain histograms took 0.003626 seconds

-----------------------------------------------------
Computing KDE
In uqScalarSequence<T>::subInterQuantileRange(): iqrValue = 2.67423, dataSize = 2048, pos1 = 511, pos3 = 1535, value1 = -2.31636, value3 = 0.357872
In uqScalarSequence<T>::subInterQuantileRange(): iqrValue = 1.28714, dataSize = 2048, pos1 = 511, pos3 = 1535, value1 = 1.37997, value3 = 2.66711
In uqScalarSequence<T>::subScaleForKDE(): iqrValue = 2.67423, meanValue = -0.996522, samValue = 3.98534, dataSize = 2048, scaleValue = 0.460399
In uqScalarSequence<T>::subScaleForKDE(): iqrValue = 1.28714, meanValue = 2.02021, samValue = 0.980204, dataSize = 2048, scaleValue = 0.221596

Computed inter quantile ranges for chain fp_mc_ParamSeq
Parameter         iqr
           2.6742e+00
           1.2871e+00
Chain KDE took 0.078975 seconds

-----------------------------------------------------
 Finished computing histogram and/or cdf stacc and/or KDE for chain fp_mc_ParamSeq
-----------------------------------------------------



-----------------------------------------------------
 Computing covariance and correlation matrices for chain fp_mc_ParamSeq ...
-----------------------------------------------------


uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain fp_mc_ParamSeq: contents of covariance matrix are
3.98534 0.0383035 # 0.0383035 0.980204 # 

uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain fp_mc_ParamSeq: contents of correlation matrix are
1 0.0193797 # 0.0193797 1 # 

-----------------------------------------------------
 Finished computing covariance and correlation matrices for chain fp_mc_ParamSeq
-----------------------------------------------------

All statistics took 0.085399 seconds

-----------------------------------------------------
 Finished computing statistics for chain fp_mc_ParamSeq
-----------------------------------------------------

In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(): returned from call to 'workingPSeq.computeStatistics()'
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(), prefix = fp_mc_: checking necessity of opening output files for qseq fp_mc_QoiSeq...
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(), prefix = fp_mc_: closed unified data output file 'outputData/fp_q_seq' for qseq fp_mc_QoiSeq
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(): about to call 'workingQSeq.computeStatistics()'


-----------------------------------------------------
 Computing statistics for chain fp_mc_QoiSeq ...
-----------------------------------------------------

In uqBaseVectorSequence<V,M>::computeStatistics(): initial positions for statistics = 0

-----------------------------------------------------
Computing mean, sample variance and population variance

Estimated variance of sample mean for the whole chain fp_mc_QoiSeq, under independence assumption:
0.00246199

Mean and variances took 0.000554 seconds

Mean, sample std, population std
Parameter    Mean         SampleStd         Popul.Std
           1.0237e+00   2.2455e+00   2.2449e+00

-----------------------------------------------------
Computing autocorrelation coefficients (via fft)
In uqBaseVectorSequence<V,M>::computeAutoCorrViaFFT(): lags for autocorrelation (via fft) =  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
In uqBaseVectorSequence<V,M>::computeAutoCorrViaFFT(): about to call chain.autoCorrViaFft() with initialPos = 0, numPos = 2048, lagsForCorrs.size() = 15, corrVecs.size() = 15

Estimated variance of sample mean, through autocorrelation (via fft), for subchain beggining at position 0
0.000397905


Computed autocorrelation coefficients (via fft), for subchain beggining at position 0 (each column corresponds to a different lag)
Parameter            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15
            9.6879e-02  -3.5594e-02  -4.1248e-03   8.1145e-03  -1.7359e-02  -9.7033e-03   1.4843e-02  -2.9065e-03  -4.5724e-03  -8.2599e-03   2.2668e-02  -2.0157e-03   1.0709e-02   1.4544e-02   1.3156e-02
Chain autocorrelation (via fft) took 0.004517 seconds


-----------------------------------------------------
 Computing histogram and/or cdf stacc and/or KDE for chain fp_mc_QoiSeq ...
-----------------------------------------------------


-----------------------------------------------------
Computing min and max for histograms and KDE

Computed min values and max values for chain fp_mc_QoiSeq
Parameter         min         max
          -6.8894e+00   9.5406e+00
Chain min and max took 0.000243 seconds

-----------------------------------------------------
Computing histograms
Chain histograms took 0.001939 seconds

-----------------------------------------------------
Computing KDE
In uqScalarSequence<T>::subInterQuantileRange(): iqrValue = 3.00422, dataSize = 2048, pos1 = 511, pos3 = 1535, value1 = -0.529782, value3 = 2.47444
In uqScalarSequence<T>::subScaleForKDE(): iqrValue = 3.00422, meanValue = 1.02369, samValue = 5.04215, dataSize = 2048, scaleValue = 0.51721

Computed inter quantile ranges for chain fp_mc_QoiSeq
Parameter         iqr
           3.0042e+00
Chain KDE took 0.039816 seconds

-----------------------------------------------------
 Finished computing histogram and/or cdf stacc and/or KDE for chain fp_mc_QoiSeq
-----------------------------------------------------



-----------------------------------------------------
 Computing covariance and correlation matrices for chain fp_mc_QoiSeq ...
-----------------------------------------------------


uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain fp_mc_QoiSeq: contents of covariance matrix are
5.04215 # 

uqBaseVectorSequence<V,M>::computeCovCorrMatrices, chain fp_mc_QoiSeq: contents of correlation matrix are
1 # 

-----------------------------------------------------
 Finished computing covariance and correlation matrices for chain fp_mc_QoiSeq
-----------------------------------------------------

All statistics took 0.048125 seconds

-----------------------------------------------------
 Finished computing statistics for chain fp_mc_QoiSeq
-----------------------------------------------------

In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(): returned from call to 'workingQSeq.computeStatistics()'
In uqMonteCarloSG<P_V,P_M,Q_V,Q_M>::internGenerateSequence(), prefix = fp_mc_: closed generic data output file 'outputData/sfpOutput' for qoi sequence fp_mc_QoiSeq

In uqSequentialVectorRealizer<V,M>::constructor(): m_chain.subSequenceSize() = 2048
In uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::solveWithMonteCarlo(), prefix = fp_: instantiating cov and corr matrices
In uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::solveWithMonteCarlo(), prefix = fp_: contents of covariance matrix are
4.02364 # 1.01851 # 
In uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::solveWithMonteCarlo(), prefix = fp_: contents of correlation matrix are
0.897592 # 0.45814 # 
In uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::solveWithMonteCarlo(), prefix = fp_: checking necessity of opening data output file 'outputData/sfpOutput'
In uqStatisticalForwardProblem<P_V,P_M,Q_V,Q_M>::solveWithMonteCarlo(), prefix = fp_: closed data output file 'outputData/sfpOutput'

Ending run at Sun Sep  6 09:36:13 2009
Total run time = 2 seconds
