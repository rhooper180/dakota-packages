#ifndef SAMPLINGSTATE_H_
#define SAMPLINGSTATE_H_

#include <iostream>
#include <unordered_map>
#include <vector>
#include <memory>

#include <Eigen/Core>
#include <boost/any.hpp>

#include "MUQ/config.h"

#if MUQ_HAS_PARCER
#include "MUQ/Utilities/Cereal/BoostAnySerializer.h"
#include <cereal/types/string.hpp>
#include <cereal/types/unordered_map.hpp>
#include <cereal/types/vector.hpp>
#endif

namespace muq {
  namespace SamplingAlgorithms {

    /**
    @class SamplingState
    @brief Each state is one sample generated by a sampling algorithm
    @details A SamplingState includes a vector holding the location of the state as
             well as a std::map of metadata.  The metadata can include density
             evaluations and other information collected by the sampling algorithm.
     */
    class SamplingState {
    public:


      SamplingState() = default;

      /*SamplingState(SamplingState const& in) {
        state = in.state;
        weight = in.weight;
        meta = in.meta;
      };*/
      SamplingState(Eigen::VectorXd const& stateIn, double weight = 1.0);
      SamplingState(std::vector<Eigen::VectorXd> const& stateIn, double weight = 1.0);

      virtual ~SamplingState() = default;

      /// The state variables
      std::vector<Eigen::VectorXd> state;

      /// The weight of this state
      double weight;

      /// Checks to see if the meta map contains a particular key
      bool HasMeta(std::string const& metaKey);

      /// The total number of parameters in the state, i.e., the sum of state[i].size()
      int TotalDim() const;

      /**
      If blockInd>=0, then this function simply returns the state vector at the specified block.  Otherwise,
      this function concatenates all the blocks into a single Eigen::VectorXd.
      */
      Eigen::VectorXd ToVector(int blockInd=-1) const;

      /** Returns the state value given an index into concatenated state vector.
          @param[in] totalInd Index into the concatenated state.  Maximum value is TotalDim()-1.
      */
      double StateValue(unsigned int totalInd) const;
      double& StateValue(unsigned int totalInd);
      
      /// A map containing extra information like the target density, run time, forward model output, etc...
      std::unordered_map<std::string, boost::any> meta;


#if MUQ_HAS_PARCER
      /** @brief Serialization function for use with Cereal.
          @details This function provides a way to serialize most of the SamplingState
          for use with Cereal and ParCer.  Due to the intracacies of serializing
          the boost::any type, this function does not serialize the meta variable.
      */
      template<class Archive>
	    void serialize(Archive & archive) {
        archive(state, weight, meta); // serialize things by passing them to the archive
      }

#endif
    };
  } // namespace SamplingAlgoritms
} // namespace muq

#endif
